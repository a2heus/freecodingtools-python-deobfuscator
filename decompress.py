import zlib
import base64
import re
obfuscated_code = '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'


def deobfuscate(code):
    try:
        reversed_code = code[::-1]
        decoded_data = base64.b64decode(reversed_code)
        decompressed_data = zlib.decompress(decoded_data)
        return decompressed_data.decode()
    except Exception as e:
        print(f"Erreur lors de la déobfuscation: {e}")
        return None

current_code = obfuscated_code
while True:
    print(f"Déobfuscation en cours : {current_code}")
    deobfuscated_code = deobfuscate(current_code.encode())
    if deobfuscated_code is None or "exec((_)(b'" not in deobfuscated_code:
        break
    match = re.search(r"exec\(\(_\)\(b'(.*?)'\)\)", deobfuscated_code)
    if match:
        current_code = match.group(1)
    else:
        break

print("Code final déobfusqué :")
print(deobfuscated_code)
